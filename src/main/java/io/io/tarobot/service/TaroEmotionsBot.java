package io.io.tarobot.service;

import io.io.tarobot.domain.UserState;
import lombok.extern.slf4j.Slf4j;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Slf4j
public class TaroEmotionsBot extends TelegramLongPollingBot {

    private final String botUsername;
    private final String botToken;
    private final TaroService taroService;

    private final Map<Long, UserState> userStates = new HashMap<>();
    private final Map<Long, String> userSelectedCategory = new HashMap<>();
    private final Map<Long, String> userLastQuery = new HashMap<>();

    public TaroEmotionsBot(String botUsername, String botToken, TaroService taroService) {
        this.botUsername = botUsername;
        this.botToken = botToken;
        this.taroService = taroService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        log.info("TaroEmotionsBot[onUpdateReceived] initiated");
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleText(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        }
        log.info("TaroEmotionsBot[onUpdateReceived] finished");
    }

    private void handleText(Message message) {
        log.info("TaroEmotionsBot[handleText] initiated");
        long chatId = message.getChatId();
        String userInput = message.getText();
        UserState state = userStates.getOrDefault(chatId, UserState.IDLE);

        if (userInput.equals("/start")) {
            sendWelcome(chatId);
            return;
        }

        switch (state) {
            case ENTERING_QUESTION -> {
                userLastQuery.put(chatId, userInput);
                userStates.put(chatId, UserState.WAITING_FOR_CONFIRMATION);
                sendMessageWithButtons(chatId, "üîÆ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏ ¬´–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥¬ª, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.",
                        List.of(
                                List.of(button("üÉè –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "confirm_tarot")),
                                List.of(button("‚ùå –û—Ç–º–µ–Ω–∞", "start_tarot"))
                        ));
            }
            case AWAITING_CLARIFICATION -> {
                if (userLastQuery.containsKey(chatId)) {
                    String previousQuery = userLastQuery.get(chatId);
                    String clarifyingQuery = previousQuery + " | –£—Ç–æ—á–Ω–µ–Ω–∏–µ: " + userInput;
                    String tarotResult = taroService.makeClarifyingQuestion(clarifyingQuery);
                    sendTarotResult(chatId, tarotResult);
                    userStates.put(chatId, UserState.IDLE);
                } else {
                    sendMessage(chatId, "‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥.");
                }
            }
            default -> sendMessage(chatId, "üòï –Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.");
        }
        log.info("TaroEmotionsBot[handleText] finished");
    }

    private void sendCategories(long chatId) {
        log.info("TaroEmotionsBot[sendCategories] initiated");
        sendMessageWithButtons(chatId, "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?",
                List.of(
                        List.of(button("üíñ –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "category_love")),
                        List.of(button("üíº –†–∞–±–æ—Ç–∞ –∏ –¥–µ–Ω—å–≥–∏", "category_work")),
                        List.of(button("üåÄ –≠–Ω–µ—Ä–≥–∏–∏ –¥–Ω—è", "category_energy")),
                        List.of(button("üåü –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", "category_growth")),
                        List.of(button("üîÆ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å", "category_life"))
                ));
        log.info("TaroEmotionsBot[sendCategories] finished");
    }

    private void handleCallback(CallbackQuery callbackQuery) {
        log.info("TaroEmotionsBot[handleCallback] initiated");
        long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();

        switch (data) {
            case "start_tarot", "again" -> {
                userStates.put(chatId, UserState.CHOOSING_CATEGORY);
                sendCategories(chatId);
            }
            case "how_it_works" -> sendHowItWorks(chatId);
            case "category_love", "category_work", "category_energy",
                    "category_growth", "category_life" -> {
                userSelectedCategory.put(chatId, data);
                userStates.put(chatId, UserState.ENTERING_QUESTION);
                sendMessage(chatId, "üìù –û–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.");
            }
            case "confirm_tarot" -> {
                if (userLastQuery.containsKey(chatId)) {
                    userStates.put(chatId, UserState.IDLE);

                    // üõ† –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    String category = switch (userSelectedCategory.getOrDefault(chatId, "category_general")) {
                        case "category_love" -> "–õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è";
                        case "category_work" -> "–†–∞–±–æ—Ç–∞ –∏ –¥–µ–Ω—å–≥–∏";
                        case "category_energy" -> "–≠–Ω–µ—Ä–≥–∏–∏ –¥–Ω—è";
                        case "category_growth" -> "–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç";
                        case "category_life" -> "–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å";
                        default -> "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥";
                    };

                    String userQuery = category + ": " + userLastQuery.get(chatId);
                    String tarotResult = taroService.makeTarotPrediction(userQuery);
                    sendTarotResult(chatId, tarotResult);
                } else {
                    sendMessage(chatId, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.");
                }
            }
            case "clarifying_question" -> {
                if (userLastQuery.containsKey(chatId)) {
                    userStates.put(chatId, UserState.AWAITING_CLARIFICATION);
                    sendMessage(chatId, "üìù –ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å?");
                } else {
                    sendMessage(chatId, "‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥.");
                }
            }
            case "end" -> sendWelcome(chatId);
        }
        log.info("TaroEmotionsBot[handleCallback] finished");
    }

    private void sendWelcome(long chatId) {
        log.info("TaroEmotionsBot[sendWelcome] initiated");
        sendMessageWithButtons(chatId, "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç–∞—Ä–æ-–ø—Ä–æ–≤–æ–¥–Ω–∏–∫.\n–î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∫–∞—Ä—Ç—ã?",
                List.of(
                        List.of(button("üÉè –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "start_tarot")),
                        List.of(button("‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", "how_it_works"))
                ));
        log.info("TaroEmotionsBot[sendWelcome] finished");
    }

    private void sendHowItWorks(long chatId) {
        log.info("TaroEmotionsBot[sendHowItWorks] initiated");
        sendMessageWithButtons(chatId, "–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Ç–µ–º—É –≥–∞–¥–∞–Ω–∏—è, —è –≤—ã—Ç—è–≥–∏–≤–∞—é –∫–∞—Ä—Ç—ã –∏ –¥–∞—é —Ç–µ–±–µ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.\n–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
                List.of(List.of(button("üÉè –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "start_tarot"))));
        log.info("TaroEmotionsBot[sendHowItWorks] finished");
    }

    private void sendTarotResult(long chatId, String result) {
        log.info("TaroEmotionsBot[sendTarotResult] initiated");
        sendMessageWithButtons(chatId, result,
                List.of(
                        List.of(button("üîÑ –°–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–∞—Å–∫–ª–∞–¥", "again")),
                        List.of(button("üßò –ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å", "clarifying_question")),
                        List.of(button("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", "end"))
                ));
        log.info("TaroEmotionsBot[sendTarotResult] finished");
    }

    private void sendMessageWithButtons(long chatId, String text, List<List<InlineKeyboardButton>> buttons) {
        log.info("TaroEmotionsBot[sendMessageWithButtons] initiated");
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(buttons);
        message.setReplyMarkup(markup);

        sendMessage(message);
        log.info("TaroEmotionsBot[sendMessageWithButtons] finished");
    }

    private InlineKeyboardButton button(String text, String data) {
        InlineKeyboardButton btn = new InlineKeyboardButton();
        btn.setText(text);
        btn.setCallbackData(data);
        return btn;
    }

    private void sendMessage(long chatId, String text) {
        log.info("TaroEmotionsBot[sendMessage] initiated");
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        sendMessage(message);
        log.info("TaroEmotionsBot[sendMessage] finished");
    }

    private void sendMessage(SendMessage message) {
        log.info("TaroEmotionsBot[sendMessage] initiated");
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
        }
        log.info("TaroEmotionsBot[sendMessage] finished");
    }
}
